module and(left, right) -> result {
    torch torch_l;
    torch torch_r;

    torch_l = left;
    torch_r = right;

    torch torch_c;
    torch_c = torch_l;
    torch_c = torch_r;

    result = torch_c;
}

module xor(left, right) -> result {
        torch torch_l;
        torch torch_r;
        dust nand_inputs;

        torch_l = left;
        torch_r = right;

        nand_inputs = torch_l;
        nand_inputs = torch_r;

        torch torch_bottom_l;
        torch torch_bottom_r;

        torch_bottom_l = left;
        torch_bottom_r = right;

        torch center;

        center = nand_inputs;
        center = torch_bottom_l;
        center = torch_bottom_r;
        
        dust dust_l;
        dust dust_r;
        
        dust_l = center;
        dust_l = torch_bottom_l;

        dust_r = center;
        dust_r = torch_bottom_r;

        torch torch_final_l;
        torch torch_final_r;

        torch_final_l = dust_l;
        torch_final_r = dust_r;

        result = torch_final_l;
        result = torch_final_r;
}

module half_adder(left, right) -> bit, carry {
        xor x(left, right);
        and a(left, right);
        
        bit = x.result;
        carry = a.result;
}

module full_adder(l0, r0, c) -> o0, carry {
        half_adder h1(l0, r0);
        half_adder h2(h1.carry, c);

        bit = h2.bit;
        carry = h2.carry;
}

$print(0, full_adder(0, 0, 0).bit, 0);
$print(0, full_adder(0, 0, 1).bit, 1);
$print(0, full_adder(0, 1, 0).bit, 1);
$print(0, full_adder(0, 1, 1).bit, 0);

$print(0, full_adder(1, 0, 0).bit, 1);
$print(0, full_adder(1, 0, 1).bit, 0);
$print(0, full_adder(1, 1, 0).bit, 0);
$print(0, full_adder(1, 1, 1).bit, 1);

$print(0, full_adder(0, 0, 0).carry, 0);
$print(0, full_adder(0, 0, 1).carry, 0);
$print(0, full_adder(0, 1, 0).carry, 0);
$print(0, full_adder(0, 1, 1).carry, 1);

$print(0, full_adder(1, 0, 0).carry, 0);
$print(0, full_adder(1, 0, 1).carry, 1);
$print(0, full_adder(1, 1, 0).carry, 1);
$print(0, full_adder(1, 1, 1).carry, 0);
